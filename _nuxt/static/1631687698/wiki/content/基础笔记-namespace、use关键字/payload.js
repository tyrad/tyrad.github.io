__NUXT_JSONP__("/wiki/content/%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0-namespace%E3%80%81use%E5%85%B3%E9%94%AE%E5%AD%97", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q){return {data:[{},{article:{slug:B,title:C,layout:"page",date:u,toc:[{id:v,depth:m,text:v},{id:w,depth:m,text:w},{id:x,depth:m,text:x},{id:D,depth:m,text:E},{id:y,depth:m,text:y}],body:{type:"root",children:[{type:b,tag:"blockquote",props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"参考:"},{type:b,tag:l,props:{href:F,rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:F}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"namespace是php5.3时引入的."}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"PHP 命名空间可以解决以下两类问题："}]},{type:a,value:c},{type:b,tag:G,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"用户编写的代码与PHP内部的类\u002F函数\u002F常量或第三方类\u002F函数\u002F常量之间的名字冲突。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:o,props:{id:v},children:[{type:b,tag:l,props:{href:"#%E5%AE%9A%E4%B9%89%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。语法格式如下；"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C ?php  \n\u002F\u002F 定义代码在 'MyProject' 命名空间中  \nnamespace MyProject;  \n\u002F\u002F ... 代码 ... \n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"你也可以在同一个文件中定义不同的命名空间代码，如："}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C ?php  \nnamespace MyProject1;  \n\u002F\u002F MyProject1 命名空间中的PHP代码  \n \nnamespace MyProject2;  \n\u002F\u002F MyProject2 命名空间中的PHP代码    \n \n\u002F\u002F 另一种语法\nnamespace MyProject3 {  \n \u002F\u002F MyProject3 命名空间中的PHP代码    \n}  \n?\u003E  \n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 declare 语句。"},{type:b,tag:z,props:{},children:[{type:a,value:"所有非 PHP 代码包括空白符都不能出现在命名空间的声明之前"}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C?php\ndeclare(encoding='UTF-8'); \u002F\u002F定义多个命名空间和不包含在命名空间中的代码\nnamespace MyProject {\n    const CONNECT_OK = 1;\n    class Connection { \u002F* ... *\u002F }\n    function connect() { \u002F* ... *\u002F  }\n}\n\nnamespace { \u002F\u002F 全局代码\n    session_start();\n    $a = MyProject\\connect();\n    echo MyProject\\Connection::start();\n}\n?\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:o,props:{id:w},children:[{type:b,tag:l,props:{href:"#%E5%AD%90%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:w}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"与目录和文件的关系很象，PHP 命名空间也"},{type:b,tag:z,props:{},children:[{type:a,value:"允许指定层次化的命名空间的名称"}]},{type:a,value:"。因此，命名空间的名字可以使用分层次的方式定义："}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C?php\nnamespace MyProject\\Sub\\Level;  \u002F\u002F声明分层次的单个命名空间\nconst CONNECT_OK = 1;\nclass Connection { \u002F* ... *\u002F }\nfunction Connect() { \u002F* ... *\u002F  }\n?\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:o,props:{id:x},children:[{type:b,tag:l,props:{href:"#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"PHP 命名空间中的类名可以通过三种方式引用："}]},{type:a,value:c},{type:b,tag:G,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:z,props:{},children:[{type:a,value:"非限定名称，或不包含前缀的类名称"}]},{type:a,value:"，例如 "},{type:b,tag:d,props:{},children:[{type:a,value:"$a=new foo(); "}]},{type:a,value:"或 "},{type:b,tag:d,props:{},children:[{type:a,value:"foo::staticmethod();"}]},{type:a,value:"。如果当前命名空间是 currentnamespace，foo 将被解析为 currentnamespace\\foo。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，则 foo 会被解析为foo。 "},{type:b,tag:z,props:{},children:[{type:a,value:"警告：如果命名空间中的函数或常量未定义，则该非限定的函数名称或常量名称会被解析为全局函数名称或常量名称"}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"限定名称,或包含前缀的名称，例如 "},{type:b,tag:d,props:{},children:[{type:a,value:"$a = new subnamespace\\foo();"}]},{type:a,value:H},{type:b,tag:d,props:{},children:[{type:a,value:"subnamespace\\foo::staticmethod();"}]},{type:a,value:"。如果当前的命名空间是 currentnamespace，则 foo 会被解析为 "},{type:b,tag:d,props:{},children:[{type:a,value:"currentnamespace\\subnamespace\\foo"}]},{type:a,value:"。如果使用 foo 的代码是全局的，不包含在任何命名空间中的代码，foo 会被解析为"},{type:b,tag:d,props:{},children:[{type:a,value:"subnamespace\\foo"}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"完全限定名称，或包含了全局前缀操作符的名称，例如，"},{type:b,tag:d,props:{},children:[{type:a,value:" $a = new \\currentnamespace\\foo();"}]},{type:a,value:H},{type:b,tag:d,props:{},children:[{type:a,value:"\\currentnamespace\\foo::staticmethod();"}]},{type:a,value:"。在这种情况下，foo 总是被解析为代码中的文字名"},{type:b,tag:d,props:{},children:[{type:a,value:"(literal name)currentnamespace\\foo"}]},{type:a,value:A}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:o,props:{id:D},children:[{type:b,tag:l,props:{href:"#%E4%BD%BF%E7%94%A8%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%EF%BC%9A%E5%88%AB%E5%90%8D%E5%AF%BC%E5%85%A5",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"PHP 命名空间支持 有两种使用别名或导入方式：为类名称使用别名，或为命名空间名称使用别名。注意PHP不支持导入函数或常量。\n在PHP中，别名是通过操作符 use 来实现的. 下面是一个使用所有可能的三种导入方式的例子："}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"1). 使用use操作符导入\u002F使用别名"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C?php\nnamespace foo;\nuse My\\Full\\Classname as Another;\n\n\u002F\u002F 下面的例子与 use My\\Full\\NSname as NSname 相同\nuse My\\Full\\NSname;\n\n\u002F\u002F 导入一个全局类\nuse \\ArrayObject;\n\n$obj = new namespace\\Another; \u002F\u002F 实例化 foo\\Another 对象\n$obj = new Another; \u002F\u002F 实例化 My\\Full\\Classname　对象\nNSname\\subns\\func(); \u002F\u002F 调用函数 My\\Full\\NSname\\subns\\func\n$a = new ArrayObject(array(1)); \u002F\u002F 实例化 ArrayObject 对象\n\u002F\u002F 如果不使用 \"use \\ArrayObject\" ，则实例化一个 foo\\ArrayObject 对象\n?\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"2). 一行中包含多个use语句"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C?php\nuse My\\Full\\Classname as Another, My\\Full\\NSname;\n\n$obj = new Another; \u002F\u002F 实例化 My\\Full\\Classname 对象\nNSname\\subns\\func(); \u002F\u002F 调用函数 My\\Full\\NSname\\subns\\func\n?\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"导入操作是在编译执行的，但动态的类名称、函数名称或常量名称则不是。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"3). 导入和动态名称"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C?php\nuse My\\Full\\Classname as Another, My\\Full\\NSname;\n\n$obj = new Another; \u002F\u002F 实例化一个 My\\Full\\Classname 对象\n$a = 'Another';\n$obj = new $a;      \u002F\u002F 实际化一个 Another 对象\n?\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"另外，导入操作只影响非限定名称和限定名称。完全限定名称由于是确定的，故不受导入的影响。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"4).  导入和完全限定名称"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C?php\nuse My\\Full\\Classname as Another, My\\Full\\NSname;\n\n$obj = new Another; \u002F\u002F instantiates object of class My\\Full\\Classname\n$obj = new \\Another; \u002F\u002F instantiates object of class Another\n$obj = new Another\\thing; \u002F\u002F instantiates object of class My\\Full\\Classname\\thing\n$obj = new \\Another\\thing; \u002F\u002F instantiates object of class Another\\thing\n?\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:o,props:{id:y},children:[{type:b,tag:l,props:{href:"#%E4%B8%BE%E4%BE%8B",ariaHidden:p,tabIndex:q},children:[{type:b,tag:r,props:{className:[s,t]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"两个文件分别为"},{type:b,tag:d,props:{},children:[{type:a,value:"A.php"}]},{type:a,value:" 、"},{type:b,tag:d,props:{},children:[{type:a,value:"B.php"}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u002F\u002FA.php\n\u003C?php\nnamespace A\\B\\C;\nclass Apple\n{\n    function  hello(){\n        echo 'hello world A';\n    }\n}\n\u002F\u002FB.php\n\u003C?php\nclass Apple\n{\n    function  hello(){\n        echo 'hello world B';\n    }\n\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"在其他文件中引入:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"include_once('A.php');\ninclude_once('B.php');\n\n\u002F\u002F没有使用namespace的情况\n$b = new Apple();\n$b-\u003Ehello(); \u002F\u002Fhello world B\necho '\u003C\u002Fbr\u003E';\n$a  = new A\\B\\C\\Apple();\n$a -\u003Ehello(); \u002F\u002Fhello world A\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"为了方便使用"},{type:b,tag:d,props:{},children:[{type:a,value:"use"}]},{type:a,value:"关键字:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"use  A\\B\\C\\Apple;\n$c = new Apple();\n$c-\u003Ehello(); \u002F\u002Fhello world A\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"(B.php)不带命名空间的情况，表示为全局类,使用方法: 类名加个"},{type:b,tag:d,props:{},children:[{type:a,value:"\\"}]},{type:a,value:"反斜杠。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"$d = new \\Apple();\n$d-\u003Ehello();\n"}]}]}]}]},dir:"\u002Fwiki\u002FPHP\u002F基础笔记",path:I,extension:".md",createdAt:"2021-09-15T06:33:58.036Z",updatedAt:"2021-09-15T06:33:58.040Z"},prev:{slug:J,title:K,date:L},next:{slug:M,title:N,date:u},scrollTop:O,sideCategory:[{folderName:"PHP",articles:[{slug:"PHP-Grav玩法-Header",title:"Grav玩法-Header",date:"2018-01-18T16:18:03.000Z",path:"\u002Fwiki\u002FPHP\u002FPHP-Grav玩法-Header"},{slug:"PHP-Grav玩法-安装配置",title:"Grav玩法-安装配置",date:"2018-01-19T16:18:03.000Z",path:"\u002Fwiki\u002FPHP\u002FPHP-Grav玩法-安装配置"},{slug:"PHP-PHP系统架构师成长之路",title:"PHP系统架构师成长之路",date:"2017-09-04T13:15:59.000Z",path:"\u002Fwiki\u002FPHP\u002FPHP-PHP系统架构师成长之路"}],children:[{folderName:"Yii",articles:[{slug:"Yii-Yii Gii工具使用",title:"Yii Gii工具使用",date:P,path:"\u002Fwiki\u002FPHP\u002FYii\u002FYii-Yii Gii工具使用"},{slug:"Yii-Yii 安全篇",title:"Yii 安全篇",date:P,path:"\u002Fwiki\u002FPHP\u002FYii\u002FYii-Yii 安全篇"},{slug:"Yii-Yii-install",title:"Yii安装",date:"2017年07月11日21:03:26",path:"\u002Fwiki\u002FPHP\u002FYii\u002FYii-Yii-install"},{slug:"Yii-Yii-lifecycle",title:"life Cycle",date:"2017-07-16T15:53:11.000Z",path:"\u002Fwiki\u002FPHP\u002FYii\u002FYii-Yii-lifecycle"},{slug:"Yii-Yii学习笔记(二)",title:"Yii学习笔记(二)",date:Q,path:"\u002Fwiki\u002FPHP\u002FYii\u002FYii-Yii学习笔记(二)"},{slug:"Yii-Yii学习资料",title:"Yii学习资料",date:"2017-09-06T08:39:17.000Z",path:"\u002Fwiki\u002FPHP\u002FYii\u002FYii-Yii学习资料"},{slug:J,title:K,date:L,path:"\u002Fwiki\u002FPHP\u002FYii\u002FYii-view-action"},{slug:"Yii-yii-database",title:"database",date:"2017-09-03T17:29:38.000Z",path:"\u002Fwiki\u002FPHP\u002FYii\u002FYii-yii-database"},{slug:"Yii-Yii学习笔记",title:"Yii学习笔记(一)",date:Q,path:"\u002Fwiki\u002FPHP\u002FYii\u002FYii-Yii学习笔记"}],children:[]},{folderName:"基础笔记",articles:[{slug:"基础笔记-1.PHP的标记形式 && 变量",title:"变量",date:k,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-1.PHP的标记形式 && 变量"},{slug:"基础笔记-10. 数组",title:"数组",date:k,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-10. 数组"},{slug:"基础笔记-2. 常量 ",title:"常量",date:k,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-2. 常量 "},{slug:"基础笔记-3. 基本数据类型",title:"基本数据类型",date:k,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-3. 基本数据类型"},{slug:"基础笔记-4.复合数据类型",title:"复合数据类型",date:k,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-4.复合数据类型"},{slug:"基础笔记-5. 运算符 位移运算 ",title:"运算符 位移运算",date:"2017-06-15 010:02",path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-5. 运算符 位移运算 "},{slug:"基础笔记-6. 控制脚本的执行顺序 ",title:"控制脚本的执行顺序",date:k,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-6. 控制脚本的执行顺序 "},{slug:"基础笔记-7.文件加载 ",title:"文件加载\"",date:k,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-7.文件加载 "},{slug:"基础笔记-8. 错误处理",title:"错误处理",date:k,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-8. 错误处理"},{slug:"基础笔记-9. 函数",title:"函数",date:k,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-9. 函数"},{slug:"基础笔记-json",title:"json",date:"2017-10-29T11:54:28.000Z",path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-json"},{slug:B,title:C,date:u,path:I},{slug:"基础笔记-php-替代语法",path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-php-替代语法"},{slug:"基础笔记-twig-date-Zero-padding",title:"twig日期格式化,日期补0问题",date:"2018-04-27T09:30:27.000Z",path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-twig-date-Zero-padding"},{slug:M,title:N,date:u,path:"\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-双冒号和-\u003E"}],children:[]}]}]}],fetch:{},mutations:O}}("text","element","\n","code","p","div","nuxt-content-highlight","pre","language-text","line-numbers","2017-06-15 10:02","a",2,"li","h2","true",-1,"span","icon","icon-link","2017-09-02T15:53:55.000Z","定义命名空间","子命名空间","命名空间使用","举例","strong","。","基础笔记-namespace、use关键字","namespace和use关键字","使用命名空间：别名导入","使用命名空间：别名\u002F导入","http:\u002F\u002Fwww.runoob.com\u002Fphp\u002Fphp-namespace.html","ol"," 或 ","\u002Fwiki\u002FPHP\u002F基础笔记\u002F基础笔记-namespace、use关键字","Yii-view-action","Action、View","2017-09-02T11:14:01.000Z","基础笔记-双冒号和-\u003E","::和-\u003E",void 0,"2017-10-15T13:39:37.000Z","2017-09-07T20:46:52.000Z")));