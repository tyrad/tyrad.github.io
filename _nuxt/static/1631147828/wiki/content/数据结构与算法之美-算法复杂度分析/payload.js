__NUXT_JSONP__("/wiki/content/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E-%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao){return {data:[{},{article:{slug:Q,title:R,layout:"page",date:S,collection:T,toc:[{id:z,depth:U,text:z},{id:V,depth:U,text:W},{id:A,depth:X,text:A},{id:B,depth:X,text:B}],body:{type:"root",children:[{type:b,tag:Y,props:{id:z},children:[{type:b,tag:C,props:{ariaHidden:D,href:"#%E7%AE%80%E4%BB%8B",tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:z}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"执行效率是算法一个非常重要的考量指标。衡量编算法代码的执行效率:时间、空间复杂度。"}]},{type:a,value:e},{type:b,tag:Y,props:{id:V},children:[{type:b,tag:C,props:{ariaHidden:D,href:"#%E5%A4%A7-o-%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A1%A8%E7%A4%BA%E6%B3%95",tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:W}]},{type:a,value:e},{type:b,tag:H,props:{className:[I]},children:[{type:b,tag:J,props:{className:[K,M]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:q}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:p}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:r}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:p}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:s}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:$}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:p}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"3"}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:p}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"4"}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:r}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:a,value:"n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"5"}]},{type:a,value:"      sum"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:"sum"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ad}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"6"}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"7"}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"return"}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:"8"}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"假设每行代码执行的时间都一样，为 unit_time。在这个假设的基础之上，这段代码的总执行时 间是多少呢?\n第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 "},{type:b,tag:l,props:{},children:[{type:a,value:"2n*unit_time"}]},{type:a,value:" 的执行时间，所以这段代码总的执行时间就是 "},{type:b,tag:l,props:{},children:[{type:a,value:"(2n+2)*unit_time"}]},{type:a,value:"。可以看出来， 所有代码的执行时间 "},{type:b,tag:l,props:{},children:[{type:a,value:"T(n)"}]},{type:a,value:" 与每行代码的执行次数成正比。"}]},{type:a,value:e},{type:b,tag:H,props:{className:[I]},children:[{type:b,tag:J,props:{className:[K,M]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:p}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,Z]},children:[{type:a,value:_}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:r}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:p}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:s}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:p}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:p}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:p}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:N}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:r}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n    j "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:"\n    "},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:N}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:r}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:O}]},{type:a,value:"j"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:s}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:"\n        sum "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:ae},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ad}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ah}]},{type:a,value:"j\n    "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"执行时间为"},{type:b,tag:l,props:{},children:[{type:a,value:"T(n) = (2 *n * n + 2n + 3)*unit_time"}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"但是通过这两段代码执行时间的推导过程，我们可以得到 一个非常重要的规律，那就是，所有代码的执行时间 T(n) 与每行代码的执行次数 n 成正比。"}]},{type:a,value:e},{type:b,tag:H,props:{className:[I]},children:[{type:b,tag:J,props:{className:[K,"language-text"]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"T(n) = O( f(n) )\n"}]}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"T(n) 我们已经讲过了，它表示代码执行的时间;n 表示数 据规模的大小;f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以用 f(n) 来表示。 公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。"}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"当 n 很大时，你可以把它想象成 10000、100000。而公式中的低阶、常量、系数三部分并不左 右增长趋势，所以都可以忽略。我们只需要记录一个最大量级就可以了，如果用大 O 表示法表 示刚讲的那两段代码的时间复杂度，就可以记为:T(n) = O(n); T(n) = O(n^2)。"}]},{type:a,value:e},{type:b,tag:ai,props:{id:A},children:[{type:b,tag:C,props:{ariaHidden:D,href:"#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90",tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:A}]},{type:a,value:e},{type:b,tag:aj,props:{},children:[{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"只关注循环次数最多的一次代码"}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"加法法则: 总复杂度等于量级最大的那段代码的复杂度。(如顺序执行的代码,所以是一个常量的执行时间，跟 n 的规模无关。)"}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"乘法法则: 嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:ai,props:{id:B},children:[{type:b,tag:C,props:{ariaHidden:D,href:"#%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90",tabIndex:E},children:[{type:b,tag:c,props:{className:[F,G]},children:[]}]},{type:a,value:B}]},{type:a,value:e},{type:b,tag:aj,props:{},children:[{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"常量阶: O(1)"}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"对数阶: O(logn)"}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"线性阶: O(n)"}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"线性对数阶: O(nlogn)"}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"平方阶: "},{type:b,tag:l,props:{},children:[{type:a,value:"O(n^2)"}]},{type:a,value:" 、 "},{type:b,tag:l,props:{},children:[{type:a,value:"O(n^3)"}]},{type:a,value:" ...."}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"指数阶: O(2^n)"}]},{type:a,value:e},{type:b,tag:o,props:{},children:[{type:a,value:"阶乘阶: O(n!)"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:ak,props:{},children:[{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"其实就是统计执行次数"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:"strong",props:{},children:[{type:a,value:"实际举例:"}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"1). 常量阶: O(1)\n顺序执行代码的复杂度就是O(1),"}]},{type:a,value:e},{type:b,tag:ak,props:{},children:[{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一 行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1)，而不是 O(3)。"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"2). O(logn)、O(nlogn)\n对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。"}]},{type:a,value:e},{type:b,tag:H,props:{className:[I]},children:[{type:b,tag:J,props:{className:[K,M]},children:[{type:b,tag:l,props:{},children:[{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"while"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:r}]},{type:a,value:"i "},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:L}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:s}]},{type:a,value:k},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:a,value:" \n  i"},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:n}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,g]},children:[{type:a,value:ah}]},{type:b,tag:c,props:{className:[d,h]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:i}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:v}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:l,props:{},children:[{type:a,value:"1*2*2*2*2.."}]},{type:a,value:"直到"},{type:b,tag:l,props:{},children:[{type:a,value:"\u003En"}]},{type:a,value:"停止,因此需要 "},{type:b,tag:l,props:{},children:[{type:a,value:"2^p \u003E n"}]},{type:a,value:" , p为执行次数, 可得知p的值为以2为底n的对数, 即"},{type:b,tag:l,props:{},children:[{type:a,value:"p = log2 n"}]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度 都记为 O(logn)。为什么呢?"}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:b,tag:"img",props:{alt:"",src:"https:\u002F\u002Fcdn.jsdelivr.net\u002Fgh\u002Fquicktouch\u002Fimage@main\u002Fimg\u002F2018-11-21-c.png"},children:[]}]},{type:a,value:e},{type:b,tag:j,props:{},children:[{type:a,value:"如果你理解了我前面讲的 O(logn)，那 O(nlogn) 就很容易理解了。还记得我们刚讲的乘法法则 吗?如果一段代码的时间复杂度是 O(logn)，我们循环执行 n 遍，时间复杂度就是 O(nlogn) 了。而且，O(nlogn) 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间 复杂度都是 O(nlogn)。"}]}]},dir:"\u002Fwiki\u002F杂记\u002F数据结构与算法之美",path:al,extension:".md",createdAt:am,updatedAt:am},prev:{slug:"css3-v-center",title:"文字图片垂直方向居中",date:"2018-09-07T00:00:00.000Z"},next:{slug:"css3-2018-12-09",title:"img自适应容器的方法,及图片尺寸的自适应(object-fit)",date:"2018-12-09T00:00:00.000Z"},scrollTop:an,sideCategory:[{folderName:"杂记",articles:[{slug:"杂记-FAST FW150US 网卡驱动",title:"FAST FW150US 网卡驱动（mac）",date:"2016-06-20 14:21",path:"\u002Fwiki\u002F杂记\u002F杂记-FAST FW150US 网卡驱动"},{slug:"杂记-hugo中使用思维导图",title:"hugo中使用思维导图",date:"2020-05-09T00:00:00.000Z",path:"\u002Fwiki\u002F杂记\u002F杂记-hugo中使用思维导图"},{slug:"杂记-micosoft-remove-desktop-cannot-cpoy",title:"micosoft remove desktop：无法向服务器拷贝文件解决",date:ao,path:"\u002Fwiki\u002F杂记\u002F杂记-micosoft-remove-desktop-cannot-cpoy"},{slug:"杂记-sRGB和Adobe RGB的区别",title:"sRGB和Adobe RGB的区别",date:"2017-08-09T08:45:49.000Z",path:"\u002Fwiki\u002F杂记\u002F杂记-sRGB和Adobe RGB的区别"},{slug:"杂记-wiki页面的md文件整理",date:"2020-10-23T03:54:48.000Z",title:"Wiki页面的md文件整理",path:"\u002Fwiki\u002F杂记\u002F杂记-wiki页面的md文件整理"},{slug:"杂记-利用七牛发布iOS内测ipa包",title:"利用七牛发布iOS内测ipa包",date:"2016-06-16 17:15",path:"\u002Fwiki\u002F杂记\u002F杂记-利用七牛发布iOS内测ipa包"},{slug:"杂记-月入万刀",date:"2020-10-23T09:13:27.000Z",title:"月入万刀",path:"\u002Fwiki\u002F杂记\u002F杂记-月入万刀"},{slug:"杂记-精度问题的始与终",title:"精度问题的始与终",date:"2017-08-04T14:33:19.000Z",path:"\u002Fwiki\u002F杂记\u002F杂记-精度问题的始与终"},{slug:"杂记-读取rtsp协议的摄像头",title:"读取rtsp协议的摄像头",date:"2017-06-20 14:21",path:"\u002Fwiki\u002F杂记\u002F杂记-读取rtsp协议的摄像头"}],children:[{folderName:"数字图像处理",articles:[{slug:"数字图像处理-gamma",title:"gamma",date:"2017-07-23T00:00:00.000Z",path:"\u002Fwiki\u002F杂记\u002F数字图像处理\u002F数字图像处理-gamma"},{slug:"数字图像处理-openCV参考资料",title:"openCV参考资料",date:"2017-07-20T16:03:59.000Z",path:"\u002Fwiki\u002F杂记\u002F数字图像处理\u002F数字图像处理-openCV参考资料"}],children:[]},{folderName:T,articles:[{slug:Q,title:R,date:S,path:al}],children:[]},{folderName:"软考",articles:[{slug:"软考-software-ex1",title:"1.笔记",date:ao,path:"\u002Fwiki\u002F杂记\u002F软考\u002F软考-software-ex1"}],children:[]}]}]}],fetch:{},mutations:an}}("text","element","span","token","\n","punctuation","operator","number",";","p"," ","code","keyword","=","li","int","1","(",")","{","i","}"," n","   ","\n  ","简介","时间复杂度分析","几种常见时间复杂度实例分析","a","true",-1,"icon","icon-link","div","nuxt-content-highlight","pre","line-numbers","\u003C=","language-c","for","++"," \n","数据结构与算法之美-算法复杂度分析","2、算法复杂度分析","2018-11-09T20:16:12.000Z","数据结构与算法之美",2,"大-o-复杂度表示法","大 O 复杂度表示法",3,"h2","function","cal","2"," sum","0"," i","+"," sum "," i "," j ","*","h3","ol","blockquote","\u002Fwiki\u002F杂记\u002F数据结构与算法之美\u002F数据结构与算法之美-算法复杂度分析","2021-09-09T00:36:13.936Z",void 0,"2019-04-25T00:00:00.000Z")));