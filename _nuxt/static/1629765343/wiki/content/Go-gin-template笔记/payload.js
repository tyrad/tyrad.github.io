__NUXT_JSONP__("/wiki/content/Go-gin-template%E7%AC%94%E8%AE%B0", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP){return {data:[{},{article:{slug:ap,draft:false,date:aq,title:ar,toc:[{id:as,depth:F,text:at},{id:au,depth:F,text:av},{id:M,depth:F,text:M},{id:G,depth:t,text:G},{id:N,depth:t,text:N},{id:O,depth:t,text:O},{id:P,depth:t,text:P},{id:Q,depth:F,text:Q},{id:aw,depth:t,text:R},{id:S,depth:t,text:S},{id:y,depth:t,text:y},{id:T,depth:t,text:T},{id:U,depth:t,text:U},{id:V,depth:t,text:V},{id:H,depth:t,text:H},{id:W,depth:t,text:W},{id:X,depth:t,text:X},{id:Y,depth:t,text:Y},{id:Z,depth:t,text:Z},{id:ax,depth:t,text:ay},{id:I,depth:t,text:I},{id:_,depth:t,text:_},{id:az,depth:F,text:aA}],body:{type:"root",children:[{type:b,tag:aB,props:{},children:[{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:n,props:{href:ad,rel:[ae,af,ag],target:ah},children:[{type:a,value:ad}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"静态资源[借助template的实现]"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"r.GET(\"\u002FhelloWord.html\", func(c *gin.Context) {\n    c.Status(200)\n    const templateText = `printf: {{printf \"%s\" .}}`\n    tmpl, err := template.New(\"htmlTest\").Parse(templateText)\n    if err != nil {\n        log.Fatalf(\"parsing: %s\", err)\n    }\n    tmpl.Execute(c.Writer, \"helloWord\")\n})\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"gin的模板封装"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"r.LoadHTMLGlob(\"templates\u002F*\")\nr.GET(\"\u002Findex\", func(c *gin.Context) {\n    c.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n        \"title\": \"Main website\",\n    })\n})\n\n\u002F\u002F 模板内容下\n\u002F\u002F \u003Chtml\u003E\n\u002F\u002F     \u003Ch1\u003E\n\u002F\u002F         {{ .title }}\n\u002F\u002F     \u003C\u002Fh1\u003E\n\u002F\u002F \u003C\u002Fhtml\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:J,props:{id:as},children:[{type:b,tag:n,props:{href:"#go%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E-httptemplate",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:at}]},{type:a,value:c},{type:b,tag:aB,props:{},children:[{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"本文由 "},{type:b,tag:n,props:{href:"http:\u002F\u002Fksria.com\u002Fsimpread\u002F",rel:[ae,af,ag],target:ah},children:[{type:a,value:"简悦 SimpRead"}]},{type:a,value:" 转码， 原文地址 "},{type:b,tag:n,props:{href:ad,rel:[ae,af,ag],target:ah},children:[{type:a,value:"www.liwenzhou.com"}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:A}]},{type:a,value:"包实现了数据驱动的模板，用于生成可防止代码注入的安全的 HTML 内容。它提供了和"},{type:b,tag:d,props:{},children:[{type:a,value:aC}]},{type:a,value:"包相同的接口，Go 语言中输出 HTML 的场景都应使用"},{type:b,tag:d,props:{},children:[{type:a,value:A}]},{type:a,value:"这个包。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"在一些前后端不分离的 Web 架构中，我们通常需要在后端将一些数据渲染到 HTML 文档中，从而实现动态的网页（网页的布局和样式大致一样，但展示的内容并不一样）效果。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"我们这里说的模板可以理解为事先定义好的 HTML 文档文件，模板渲染的作用机制可以简单理解为文本替换操作–使用相应的数据去替换 HTML 文档中事先准备好的标记。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"很多编程语言的 Web 框架中都使用各种模板引擎，比如 Python 语言中 Flask 框架中使用的 jinja2 模板引擎。"}]},{type:a,value:c},{type:b,tag:J,props:{id:au},children:[{type:b,tag:n,props:{href:"#go-%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:av}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Go 语言内置了文本模板引擎"},{type:b,tag:d,props:{},children:[{type:a,value:aC}]},{type:a,value:"和用于 HTML 文档的"},{type:b,tag:d,props:{},children:[{type:a,value:A}]},{type:a,value:"。它们的作用机制可以简单归纳如下："}]},{type:a,value:c},{type:b,tag:aD,props:{},children:[{type:a,value:c},{type:b,tag:B,props:{},children:[{type:a,value:"模板文件通常定义为"},{type:b,tag:d,props:{},children:[{type:a,value:".tmpl"}]},{type:a,value:z},{type:b,tag:d,props:{},children:[{type:a,value:".tpl"}]},{type:a,value:"为后缀（也可以使用其他的后缀），必须使用"},{type:b,tag:d,props:{},children:[{type:a,value:"UTF8"}]},{type:a,value:"编码。"}]},{type:a,value:c},{type:b,tag:B,props:{},children:[{type:a,value:"模板文件中使用"},{type:b,tag:d,props:{},children:[{type:a,value:C}]},{type:a,value:z},{type:b,tag:d,props:{},children:[{type:a,value:D}]},{type:a,value:"包裹和标识需要传入的数据。"}]},{type:a,value:c},{type:b,tag:B,props:{},children:[{type:a,value:"传给模板这样的数据就可以通过点号（"},{type:b,tag:d,props:{},children:[{type:a,value:ai}]},{type:a,value:"）来访问，如果数据是复杂类型的数据，可以通过 {{ .FieldName}} 来访问它的字段。"}]},{type:a,value:c},{type:b,tag:B,props:{},children:[{type:a,value:"除"},{type:b,tag:d,props:{},children:[{type:a,value:C}]},{type:a,value:z},{type:b,tag:d,props:{},children:[{type:a,value:D}]},{type:a,value:"包裹的内容外，其他内容均不做修改原样输出。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:J,props:{id:M},children:[{type:b,tag:n,props:{href:"#%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E4%BD%BF%E7%94%A8",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:M}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Go 语言模板引擎的使用可以分为三部分：定义模板文件、解析模板文件和模板渲染."}]},{type:a,value:c},{type:b,tag:u,props:{id:G},children:[{type:b,tag:n,props:{href:"#%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"其中，定义模板文件时需要我们按照相关语法规则去编写，后文会详细介绍。"}]},{type:a,value:c},{type:b,tag:u,props:{id:N},children:[{type:b,tag:n,props:{href:"#%E8%A7%A3%E6%9E%90%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:N}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"上面定义好了模板文件之后，可以使用下面的常用方法去解析模板文件，得到模板对象："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"func (t *Template) Parse(src string) (*Template, error)\nfunc ParseFiles(filenames ...string) (*Template, error)\nfunc ParseGlob(pattern string) (*Template, error)\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"当然，你也可以使用"},{type:b,tag:d,props:{},children:[{type:a,value:"func New(name string) *Template"}]},{type:a,value:"函数创建一个名为"},{type:b,tag:d,props:{},children:[{type:a,value:aE}]},{type:a,value:"的模板，然后对其调用上面的方法去解析模板字符串或模板文件。"}]},{type:a,value:c},{type:b,tag:u,props:{id:O},children:[{type:b,tag:n,props:{href:"#%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:O}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"渲染模板简单来说就是使用数据去填充模板，当然实际上可能会复杂很多。"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"func (t *Template) Execute(wr io.Writer, data interface{}) error\nfunc (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error\n"}]}]}]},{type:a,value:c},{type:b,tag:u,props:{id:P},children:[{type:b,tag:n,props:{href:"#%E5%9F%BA%E6%9C%AC%E7%A4%BA%E4%BE%8B",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:P}]},{type:a,value:c},{type:b,tag:aF,props:{id:"定义模板文件-1"},children:[{type:b,tag:n,props:{href:"#%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6-1",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"我们按照 Go 模板语法定义一个"},{type:b,tag:d,props:{},children:[{type:a,value:aj}]},{type:a,value:"的模板文件，内容如下："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,"language-html"]},children:[{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{className:[f,"doctype"]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:"\u003C!"}]},{type:b,tag:e,props:{className:[f,"doctype-tag"]},children:[{type:a,value:"DOCTYPE"}]},{type:a,value:E},{type:b,tag:e,props:{className:[f,aE]},children:[{type:a,value:ak}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:c},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:w}]},{type:a,value:ak}]},{type:a,value:E},{type:b,tag:e,props:{className:[f,$]},children:[{type:a,value:"lang"}]},{type:b,tag:e,props:{className:[f,aa]},children:[{type:b,tag:e,props:{className:[f,h,ab]},children:[{type:a,value:ac}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:x}]},{type:a,value:"zh-CN"},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:x}]}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:c},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:w}]},{type:a,value:aG}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:K},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:w}]},{type:a,value:al}]},{type:a,value:E},{type:b,tag:e,props:{className:[f,$]},children:[{type:a,value:"charset"}]},{type:b,tag:e,props:{className:[f,aa]},children:[{type:b,tag:e,props:{className:[f,h,ab]},children:[{type:a,value:ac}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:x}]},{type:a,value:"UTF-8"},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:x}]}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:K},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:w}]},{type:a,value:al}]},{type:a,value:E},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:K},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:w}]},{type:a,value:al}]},{type:a,value:E},{type:b,tag:e,props:{className:[f,$]},children:[{type:a,value:"http-equiv"}]},{type:b,tag:e,props:{className:[f,aa]},children:[{type:b,tag:e,props:{className:[f,h,ab]},children:[{type:a,value:ac}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:x}]},{type:a,value:"X-UA-Compatible"},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:x}]}]},{type:a,value:E},{type:b,tag:e,props:{className:[f,$]},children:[{type:a,value:"content"}]},{type:b,tag:e,props:{className:[f,aa]},children:[{type:b,tag:e,props:{className:[f,h,ab]},children:[{type:a,value:ac}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:x}]},{type:a,value:"ie=edge"},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:x}]}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:K},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:w}]},{type:a,value:aH}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:"Hello"},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:L}]},{type:a,value:aH}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:c},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:L}]},{type:a,value:aG}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:c},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:w}]},{type:a,value:aI}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:K},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:w}]},{type:a,value:g}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:"Hello {{.}}"},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:L}]},{type:a,value:g}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:c},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:L}]},{type:a,value:aI}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:c},{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,o]},children:[{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:L}]},{type:a,value:ak}]},{type:b,tag:e,props:{className:[f,h]},children:[{type:a,value:v}]}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:aF,props:{id:aJ},children:[{type:b,tag:n,props:{href:"#%E8%A7%A3%E6%9E%90%E5%92%8C%E6%B8%B2%E6%9F%93%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:aJ}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"然后我们创建一个"},{type:b,tag:d,props:{},children:[{type:a,value:aK}]},{type:a,value:"文件，在其中写下 HTTP server 端代码如下："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u002F\u002F main.go\n\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n    \u002F\u002F 解析指定文件生成模板对象\n    tmpl, err := template.ParseFiles(\".\u002Fhello.tmpl\")\n    if err != nil {\n        fmt.Println(\"create template failed, err:\", err)\n        return\n    }\n    \u002F\u002F 利用给定数据渲染模板，并将结果写入w\n    tmpl.Execute(w, \"沙河小王子\")\n}\nfunc main() {\n    http.HandleFunc(\"\u002F\", sayHello)\n    err := http.ListenAndServe(\":9090\", nil)\n    if err != nil {\n        fmt.Println(\"HTTP server failed,err:\", err)\n        return\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"将上面的"},{type:b,tag:d,props:{},children:[{type:a,value:aK}]},{type:a,value:"文件编译执行，然后使用浏览器访问"},{type:b,tag:d,props:{},children:[{type:a,value:"http:\u002F\u002F127.0.0.1:9090"}]},{type:a,value:"就能看到页面上显示了 “Hello 沙河小王子”。 这就是一个最简单的模板渲染的示例，Go 语言模板引擎详细用法请往下阅读。"}]},{type:a,value:c},{type:b,tag:J,props:{id:Q},children:[{type:b,tag:n,props:{href:"#%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:Q}]},{type:a,value:c},{type:b,tag:u,props:{id:aw},children:[{type:a,value:R}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"模板语法都包含在"},{type:b,tag:d,props:{},children:[{type:a,value:C}]},{type:a,value:z},{type:b,tag:d,props:{},children:[{type:a,value:D}]},{type:a,value:"中间，其中"},{type:b,tag:d,props:{},children:[{type:a,value:R}]},{type:a,value:"中的点表示当前对象。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"当我们传入一个结构体对象时，我们可以根据"},{type:b,tag:d,props:{},children:[{type:a,value:ai}]},{type:a,value:"来访问结构体的对应字段。例如："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u002F\u002F main.go\n\ntype UserInfo struct {\n    Name   string\n    Gender string\n    Age    int\n}\n\nfunc sayHello(w http.ResponseWriter, r *http.Request) {\n    \u002F\u002F 解析指定文件生成模板对象\n    tmpl, err := template.ParseFiles(\".\u002Fhello.tmpl\")\n    if err != nil {\n        fmt.Println(\"create template failed, err:\", err)\n        return\n    }\n    \u002F\u002F 利用给定数据渲染模板，并将结果写入w\n    user := UserInfo{\n        Name:   \"小王子\",\n        Gender: \"男\",\n        Age:    18,\n    }\n    tmpl.Execute(w, user)\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"模板文件"},{type:b,tag:d,props:{},children:[{type:a,value:aj}]},{type:a,value:"内容如下："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C!DOCTYPE html\u003E\n\u003Chtml lang=\"zh-CN\"\u003E\n\u003Chead\u003E\n    \u003Cmeta charset=\"UTF-8\"\u003E\n    \u003Cmeta \u003E\n    \u003Cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003E\n    \u003Ctitle\u003EHello\u003C\u002Ftitle\u003E\n\u003C\u002Fhead\u003E\n\u003Cbody\u003E\n    \u003Cp\u003EHello {{.Name}}\u003C\u002Fp\u003E\n    \u003Cp\u003E性别：{{.Gender}}\u003C\u002Fp\u003E\n    \u003Cp\u003E年龄：{{.Age}}\u003C\u002Fp\u003E\n\u003C\u002Fbody\u003E\n\u003C\u002Fhtml\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"同理，当我们传入的变量是 map 时，也可以在模板文件中通过"},{type:b,tag:d,props:{},children:[{type:a,value:ai}]},{type:a,value:"根据 key 来取值。"}]},{type:a,value:c},{type:b,tag:u,props:{id:S},children:[{type:b,tag:n,props:{href:"#%E6%B3%A8%E9%87%8A",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:S}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{\u002F* a comment *\u002F}}\n注释，执行时会忽略。可以多行。注释不能嵌套，并且必须紧贴分界符始止。\n"}]}]}]},{type:a,value:c},{type:b,tag:u,props:{id:y},children:[{type:b,tag:n,props:{href:"#pipeline",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:y}]},{type:a,value:"是指产生数据的操作。比如"},{type:b,tag:d,props:{},children:[{type:a,value:R}]},{type:a,value:"、"},{type:b,tag:d,props:{},children:[{type:a,value:"{{.Name}}"}]},{type:a,value:"等。Go 的模板语法中支持使用管道符号"},{type:b,tag:d,props:{},children:[{type:a,value:am}]},{type:a,value:"链接多个命令，用法和 unix 下的管道类似："},{type:b,tag:d,props:{},children:[{type:a,value:am}]},{type:a,value:"前面的命令会将运算结果 (或返回值) 传递给后一个命令的最后一个位置。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"**注意：**并不是只有使用了"},{type:b,tag:d,props:{},children:[{type:a,value:am}]},{type:a,value:"才是 pipeline。Go 的模板语法中，"},{type:b,tag:d,props:{},children:[{type:a,value:"pipeline的"}]},{type:a,value:"概念是传递数据，只要能产生数据的，都是"},{type:b,tag:d,props:{},children:[{type:a,value:y}]},{type:a,value:"。"}]},{type:a,value:c},{type:b,tag:u,props:{id:T},children:[{type:b,tag:n,props:{href:"#%E5%8F%98%E9%87%8F",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:T}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"我们还可以在模板中声明变量，用来保存传入模板的数据或其他语句生成的结果。具体语法如下："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"$obj := {{.}}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"其中"},{type:b,tag:d,props:{},children:[{type:a,value:"$obj"}]},{type:a,value:"是变量的名字，在后续的代码中就可以使用该变量了。"}]},{type:a,value:c},{type:b,tag:u,props:{id:U},children:[{type:b,tag:n,props:{href:"#%E7%A7%BB%E9%99%A4%E7%A9%BA%E6%A0%BC",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:U}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"有时候我们在使用模板语法的时候会不可避免的引入一下空格或者换行符，这样模板最终渲染出来的内容可能就和我们想的不一样，这个时候可以使用"},{type:b,tag:d,props:{},children:[{type:a,value:"{{-"}]},{type:a,value:"语法去除模板内容左侧的所有空白符号， 使用"},{type:b,tag:d,props:{},children:[{type:a,value:"-}}"}]},{type:a,value:"去除模板内容右侧的所有空白符号。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"例如："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{- .Name -}}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:aL,props:{},children:[{type:a,value:"注意："}]},{type:b,tag:d,props:{},children:[{type:a,value:"-"}]},{type:a,value:"要紧挨"},{type:b,tag:d,props:{},children:[{type:a,value:C}]},{type:a,value:z},{type:b,tag:d,props:{},children:[{type:a,value:D}]},{type:a,value:"，同时与模板值之间需要使用空格分隔。"}]},{type:a,value:c},{type:b,tag:u,props:{id:V},children:[{type:b,tag:n,props:{href:"#%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:V}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Go 模板语法中的条件判断有以下几种:"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{if pipeline}} T1 {{end}}\n\n{{if pipeline}} T1 {{else}} T0 {{end}}\n\n{{if pipeline}} T1 {{else if pipeline}} T0 {{end}}\n"}]}]}]},{type:a,value:c},{type:b,tag:u,props:{id:H},children:[{type:b,tag:n,props:{href:"#range",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:H}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Go 的模板语法中使用"},{type:b,tag:d,props:{},children:[{type:a,value:H}]},{type:a,value:"关键字进行遍历，有以下两种写法，其中"},{type:b,tag:d,props:{},children:[{type:a,value:y}]},{type:a,value:"的值必须是数组、切片、字典或者通道。"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{range pipeline}} T1 {{end}}\n如果pipeline的值其长度为0，不会有任何输出\n\n{{range pipeline}} T1 {{else}} T0 {{end}}\n如果pipeline的值其长度为0，则会执行T0。\n"}]}]}]},{type:a,value:c},{type:b,tag:u,props:{id:W},children:[{type:b,tag:n,props:{href:"#with",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:W}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{with pipeline}} T1 {{end}}\n如果pipeline为empty不产生输出，否则将dot设为pipeline的值并执行T1。不修改外面的dot。\n\n{{with pipeline}} T1 {{else}} T0 {{end}}\n如果pipeline为empty，不改变dot并执行T0，否则dot设为pipeline的值并执行T1。\n"}]}]}]},{type:a,value:c},{type:b,tag:u,props:{id:X},children:[{type:b,tag:n,props:{href:"#%E9%A2%84%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:X}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"执行模板时，函数从两个函数字典中查找：首先是模板函数字典，然后是全局函数字典。一般不在模板内定义函数，而是使用 Funcs 方法添加函数到模板里。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"预定义的全局函数如下："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"and\n    函数返回它的第一个empty参数或者最后一个参数；\n    就是说\"and x y\"等价于\"if x then y else x\"；所有参数都会执行；\nor\n    返回第一个非empty参数或者最后一个参数；\n    亦即\"or x y\"等价于\"if x then x else y\"；所有参数都会执行；\nnot\n    返回它的单个参数的布尔值的否定\nlen\n    返回它的参数的整数类型长度\nindex\n    执行结果为第一个参数以剩下的参数为索引\u002F键指向的值；\n    如\"index x 1 2 3\"返回x[1][2][3]的值；每个被索引的主体必须是数组、切片或者字典。\nprint\n    即fmt.Sprint\nprintf\n    即fmt.Sprintf\nprintln\n    即fmt.Sprintln\nhtml\n    返回与其参数的文本表示形式等效的转义HTML。\n    这个函数在html\u002Ftemplate中不可用。\nurlquery\n    以适合嵌入到网址查询中的形式返回其参数的文本表示的转义值。\n    这个函数在html\u002Ftemplate中不可用。\njs\n    返回与其参数的文本表示形式等效的转义JavaScript。\ncall\n    执行结果是调用第一个参数的返回值，该参数必须是函数类型，其余参数作为调用该函数的参数；\n    如\"call .X.Y 1 2\"等价于go语言里的dot.X.Y(1, 2)；\n    其中Y是函数类型的字段或者字典的值，或者其他类似情况；\n    call的第一个参数的执行结果必须是函数类型的值（和预定义函数如print明显不同）；\n    该函数类型值必须有1到2个返回值，如果有2个则后一个必须是error接口类型；\n    如果有2个返回值的方法返回的error非nil，模板执行会中断并返回给调用模板执行者该错误；\n"}]}]}]},{type:a,value:c},{type:b,tag:u,props:{id:Y},children:[{type:b,tag:n,props:{href:"#%E6%AF%94%E8%BE%83%E5%87%BD%E6%95%B0",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:Y}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"布尔函数会将任何类型的零值视为假，其余视为真。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"下面是定义为函数的二元比较运算的集合："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"eq      如果arg1 == arg2则返回真\nne      如果arg1 != arg2则返回真\nlt      如果arg1 \u003C arg2则返回真\nle      如果arg1 \u003C= arg2则返回真\ngt      如果arg1 \u003E arg2则返回真\nge      如果arg1 \u003E= arg2则返回真\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"为了简化多参数相等检测，eq（只有 eq）可以接受 2 个或更多个参数，它会将第一个参数和其余参数依次比较，返回下式的结果："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{eq arg1 arg2 arg3}}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"比较函数只适用于基本类型（或重定义的基本类型，如”type Celsius float32”）。但是，整数和浮点数不能互相比较。"}]},{type:a,value:c},{type:b,tag:u,props:{id:Z},children:[{type:b,tag:n,props:{href:"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:Z}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Go 的模板支持自定义函数。"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"func sayHello(w http.ResponseWriter, r *http.Request) {\n    htmlByte, err := ioutil.ReadFile(\".\u002Fhello.tmpl\")\n    if err != nil {\n        fmt.Println(\"read html failed, err:\", err)\n        return\n    }\n    \u002F\u002F 自定义一个夸人的模板函数\n    kua := func(arg string) (string, error) {\n        return arg + \"真帅\", nil\n    }\n    \u002F\u002F 采用链式操作在Parse之前调用Funcs添加自定义的kua函数\n    tmpl, err := template.New(\"hello\").Funcs(template.FuncMap{\"kua\": kua}).Parse(string(htmlByte))\n    if err != nil {\n        fmt.Println(\"create template failed, err:\", err)\n        return\n    }\n\n    user := UserInfo{\n        Name:   \"小王子\",\n        Gender: \"男\",\n        Age:    18,\n    }\n    \u002F\u002F 使用user渲染模板，并将结果写入w\n    tmpl.Execute(w, user)\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"我们可以在模板文件"},{type:b,tag:d,props:{},children:[{type:a,value:aj}]},{type:a,value:"中按照如下方式使用我们自定义的"},{type:b,tag:d,props:{},children:[{type:a,value:"kua"}]},{type:a,value:"函数了。"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{kua .Name}}\n"}]}]}]},{type:a,value:c},{type:b,tag:u,props:{id:ax},children:[{type:b,tag:n,props:{href:"#%E5%B5%8C%E5%A5%97-template",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:ay}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"我们可以在 template 中嵌套其他的 template。这个 template 可以是单独的文件，也可以是通过"},{type:b,tag:d,props:{},children:[{type:a,value:"define"}]},{type:a,value:"定义的 template。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"举个例子： "},{type:b,tag:d,props:{},children:[{type:a,value:an}]},{type:a,value:aM}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C!DOCTYPE html\u003E\n\u003Chtml lang=\"zh-CN\"\u003E\n\u003Chead\u003E\n    \u003Cmeta charset=\"UTF-8\"\u003E\n    \u003Cmeta \u003E\n    \u003Cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003E\n    \u003Ctitle\u003Etmpl test\u003C\u002Ftitle\u003E\n\u003C\u002Fhead\u003E\n\u003Cbody\u003E\n    \n    \u003Ch1\u003E测试嵌套template语法\u003C\u002Fh1\u003E\n    \u003Chr\u003E\n    {{template \"ul.tmpl\"}}\n    \u003Chr\u003E\n    {{template \"ol.tmpl\"}}\n\u003C\u002Fbody\u003E\n\u003C\u002Fhtml\u003E\n\n{{ define \"ol.tmpl\"}}\n\u003Col\u003E\n    \u003Cli\u003E吃饭\u003C\u002Fli\u003E\n    \u003Cli\u003E睡觉\u003C\u002Fli\u003E\n    \u003Cli\u003E打豆豆\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n{{end}}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:ao}]},{type:a,value:aM}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cul\u003E\n    \u003Cli\u003E注释\u003C\u002Fli\u003E\n    \u003Cli\u003E日志\u003C\u002Fli\u003E\n    \u003Cli\u003E测试\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"我们注册一个"},{type:b,tag:d,props:{},children:[{type:a,value:"templDemo"}]},{type:a,value:"路由处理函数."}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"http.HandleFunc(\"\u002Ftmpl\", tmplDemo)\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:"tmplDemo"}]},{type:a,value:"函数的具体内容如下："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"func tmplDemo(w http.ResponseWriter, r *http.Request) {\n    tmpl, err := template.ParseFiles(\".\u002Ft.tmpl\", \".\u002Ful.tmpl\")\n    if err != nil {\n        fmt.Println(\"create template failed, err:\", err)\n        return\n    }\n    user := UserInfo{\n        Name:   \"小王子\",\n        Gender: \"男\",\n        Age:    18,\n    }\n    tmpl.Execute(w, user)\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:aL,props:{},children:[{type:a,value:"注意"}]},{type:a,value:"：在解析模板时，被嵌套的模板一定要在后面解析，例如上面的示例中"},{type:b,tag:d,props:{},children:[{type:a,value:an}]},{type:a,value:"模板中嵌套了"},{type:b,tag:d,props:{},children:[{type:a,value:ao}]},{type:a,value:"，所以"},{type:b,tag:d,props:{},children:[{type:a,value:ao}]},{type:a,value:"要在"},{type:b,tag:d,props:{},children:[{type:a,value:an}]},{type:a,value:"后进行解析。"}]},{type:a,value:c},{type:b,tag:u,props:{id:I},children:[{type:b,tag:n,props:{href:"#block",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{block \"name\" pipeline}} T1 {{end}}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:"是定义模板"},{type:b,tag:d,props:{},children:[{type:a,value:"{{define \"name\"}} T1 {{end}}"}]},{type:a,value:"和执行"},{type:b,tag:d,props:{},children:[{type:a,value:"{{template \"name\" pipeline}}"}]},{type:a,value:"缩写，典型的用法是定义一组根模板，然后通过在其中重新定义块模板进行自定义。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"定义一个根模板"},{type:b,tag:d,props:{},children:[{type:a,value:"templates\u002Fbase.tmpl"}]},{type:a,value:"，内容如下："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C!DOCTYPE html\u003E\n\u003Chtml lang=\"zh-CN\"\u003E\n\u003Chead\u003E\n    \u003Ctitle\u003EGo Templates\u003C\u002Ftitle\u003E\n\u003C\u002Fhead\u003E\n\u003Cbody\u003E\n\u003Cdiv class=\"container-fluid\"\u003E\n    {{block \"content\" . }}{{end}}\n\u003C\u002Fdiv\u003E\n\u003C\u002Fbody\u003E\n\u003C\u002Fhtml\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"然后定义一个"},{type:b,tag:d,props:{},children:[{type:a,value:"templates\u002Findex.tmpl"}]},{type:a,value:"，” 继承”"},{type:b,tag:d,props:{},children:[{type:a,value:"base.tmpl"}]},{type:a,value:"："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{template \"base.tmpl\"}}\n\n{{define \"content\"}}\n    \u003Cdiv\u003EHello world!\u003C\u002Fdiv\u003E\n{{end}}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"然后使用"},{type:b,tag:d,props:{},children:[{type:a,value:"template.ParseGlob"}]},{type:a,value:"按照正则匹配规则解析模板文件，然后通过"},{type:b,tag:d,props:{},children:[{type:a,value:"ExecuteTemplate"}]},{type:a,value:"渲染指定的模板："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"func index(w http.ResponseWriter, r *http.Request){\n    tmpl, err := template.ParseGlob(\"templates\u002F*.tmpl\")\n    if err != nil {\n        fmt.Println(\"create template failed, err:\", err)\n        return\n    }\n    err = tmpl.ExecuteTemplate(w, \"index.tmpl\", nil)\n    if err != nil {\n        fmt.Println(\"render template failed, err:\", err)\n        return\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"如果我们的模板名称冲突了，例如不同业务线下都定义了一个"},{type:b,tag:d,props:{},children:[{type:a,value:"index.tmpl"}]},{type:a,value:"模板，我们可以通过下面两种方法来解决。"}]},{type:a,value:c},{type:b,tag:aD,props:{},children:[{type:a,value:c},{type:b,tag:B,props:{},children:[{type:a,value:"在模板文件开头使用"},{type:b,tag:d,props:{},children:[{type:a,value:"{{define 模板名}}"}]},{type:a,value:"语句显式的为模板命名。"}]},{type:a,value:c},{type:b,tag:B,props:{},children:[{type:a,value:"可以把模板文件存放在"},{type:b,tag:d,props:{},children:[{type:a,value:"templates"}]},{type:a,value:"文件夹下面的不同目录中，然后使用"},{type:b,tag:d,props:{},children:[{type:a,value:"template.ParseGlob(\"templates\u002F**\u002F*.tmpl\")"}]},{type:a,value:"解析模板。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:u,props:{id:_},children:[{type:b,tag:n,props:{href:"#%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:_}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"Go 标准库的模板引擎使用的花括号"},{type:b,tag:d,props:{},children:[{type:a,value:C}]},{type:a,value:z},{type:b,tag:d,props:{},children:[{type:a,value:D}]},{type:a,value:"作为标识，而许多前端框架（如"},{type:b,tag:d,props:{},children:[{type:a,value:"Vue"}]},{type:a,value:"和 "},{type:b,tag:d,props:{},children:[{type:a,value:"AngularJS"}]},{type:a,value:"）也使用"},{type:b,tag:d,props:{},children:[{type:a,value:C}]},{type:a,value:z},{type:b,tag:d,props:{},children:[{type:a,value:D}]},{type:a,value:"作为标识符，所以当我们同时使用 Go 语言模板引擎和以上前端框架时就会出现冲突，这个时候我们需要修改标识符，修改前端的或者修改 Go 语言的。这里演示如何修改 Go 语言模板引擎默认的标识符："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"template.New(\"test\").Delims(\"{[\", \"]}\").ParseFiles(\".\u002Ft.tmpl\")\n"}]}]}]},{type:a,value:c},{type:b,tag:J,props:{id:az},children:[{type:b,tag:n,props:{href:"#texttemplate-%E4%B8%8E-htmltempalte-%E7%9A%84%E5%8C%BA%E5%88%AB",ariaHidden:p,tabIndex:q},children:[{type:b,tag:e,props:{className:[r,s]},children:[]}]},{type:a,value:aA}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:A}]},{type:a,value:"针对的是需要返回 HTML 内容的场景，在模板渲染过程中会对一些有风险的内容进行转义，以此来防范跨站脚本攻击。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"例如，我定义下面的模板文件："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"\u003C!DOCTYPE html\u003E\n\u003Chtml lang=\"zh-CN\"\u003E\n\u003Chead\u003E\n    \u003Cmeta charset=\"UTF-8\"\u003E\n    \u003Cmeta \u003E\n    \u003Cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003E\n    \u003Ctitle\u003EHello\u003C\u002Ftitle\u003E\n\u003C\u002Fhead\u003E\n\u003Cbody\u003E\n    {{.}}\n\u003C\u002Fbody\u003E\n\u003C\u002Fhtml\u003E\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"这个时候传入一段 JS 代码并使用"},{type:b,tag:d,props:{},children:[{type:a,value:A}]},{type:a,value:"去渲染该文件，会在页面上显示出转义后的 JS 内容。 "},{type:b,tag:d,props:{},children:[{type:a,value:"\u003Cscript\u003Ealert('嘿嘿嘿')\u003C\u002Fscript\u003E"}]},{type:a,value:" 这就是"},{type:b,tag:d,props:{},children:[{type:a,value:A}]},{type:a,value:"为我们做的事。"}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"但是在某些场景下，我们如果相信用户输入的内容，不想转义的话，可以自行编写一个 safe 函数，手动返回一个"},{type:b,tag:d,props:{},children:[{type:a,value:"template.HTML"}]},{type:a,value:"类型的内容。示例如下："}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"func xss(w http.ResponseWriter, r *http.Request){\n    tmpl,err := template.New(\"xss.tmpl\").Funcs(template.FuncMap{\n        \"safe\": func(s string)template.HTML {\n            return template.HTML(s)\n        },\n    }).ParseFiles(\".\u002Fxss.tmpl\")\n    if err != nil {\n        fmt.Println(\"create template failed, err:\", err)\n        return\n    }\n    jsStr := `\u003Cscript\u003Ealert('嘿嘿嘿')\u003C\u002Fscript\u003E`\n    err = tmpl.Execute(w, jsStr)\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:g,props:{},children:[{type:a,value:"这样我们只需要在模板文件不需要转义的内容后面使用我们定义好的 safe 函数就可以了。"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:d,props:{},children:[{type:a,value:"{{ . | safe }}\n"}]}]}]}]},dir:"\u002Fwiki\u002FGo",path:aN,extension:".md",createdAt:aO,updatedAt:aO},prev:{slug:"待学习-rumtime源码解读",date:"2020-11-18T08:42:16.000Z",title:"rumtime源码解读"},next:{slug:"Safari-safari-Preview-mode",title:"Responsive Preview mode",date:"2016-05-15 10:02"},scrollTop:aP,sideCategory:[{folderName:"Go",articles:[{slug:"Go-gin-learn",title:"Gin学习笔记",date:"2020-02-09T00:00:00.000Z",path:"\u002Fwiki\u002FGo\u002FGo-gin-learn"},{slug:"Go-gin部署前后端分离项目",date:"2020-10-26T08:17:19.000Z",title:"Gin部署前后端分离项目(转载)",path:"\u002Fwiki\u002FGo\u002FGo-gin部署前后端分离项目"},{slug:ap,date:aq,title:ar,path:aN}],children:[]}]}],fetch:{},mutations:aP}}("text","element","\n","code","span","token","p","punctuation","div","nuxt-content-highlight","pre","line-numbers","language-text","a","tag","true",-1,"icon","icon-link",3,"h3","\u003E","\u003C","\"","pipeline","和","html\u002Ftemplate","li","{{","}}"," ",2,"定义模板文件","range","block","h2","\n    ","\u003C\u002F","模板引擎的使用","解析模板文件","模板渲染","基本示例","模板语法","{{.}}","注释","变量","移除空格","条件判断","with","预定义函数","比较函数","自定义函数","修改默认的标识符","attr-name","attr-value","attr-equals","=","https:\u002F\u002Fwww.liwenzhou.com\u002Fposts\u002FGo\u002Fgo_template\u002F","nofollow","noopener","noreferrer","_blank",".","hello.tmpl","html","meta","|","t.tmpl","ul.tmpl","Go-gin-template笔记","2021-02-05T07:20:05.000Z","Gin Template笔记","go语言的模板引擎-httptemplate","Go语言的模板引擎 http\u002Ftemplate","go-语言的模板引擎","Go 语言的模板引擎","","嵌套-template","嵌套 template","texttemplate-与-htmltempalte-的区别","text\u002Ftemplate 与 html\u002Ftempalte 的区别","blockquote","text\u002Ftemplate","ol","name","h4","head","title","body","解析和渲染模板文件","main.go","strong","文件内容如下：","\u002Fwiki\u002FGo\u002FGo-gin-template笔记","2021-08-24T00:34:40.871Z",void 0)));